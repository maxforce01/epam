package ua.nure.gunko.practice6.part2;

/*
 * import java.util.ArrayList; import java.util.Iterator; import
 * java.util.LinkedList; import java.util.List;
 * 
 * public class Part2 { protected int n; protected int k; public List<Integer>
 * arrayList = new ArrayList<Integer>(); public List<Integer> arrayItr = new
 * ArrayList<Integer>(); public List<Integer> linkedList = new
 * LinkedList<Integer>(); public List<Integer> linkedItr = new
 * LinkedList<Integer>();
 * 
 * public Part2(int n, int k) { this.n = n; this.k = k; for (int i = 0; i < n;
 * i++) { arrayList.add(i); arrayItr.add(i); linkedList.add(i);
 * linkedItr.add(i); } System.out.println("ArrayList#Index: " +
 * removeByIndex(arrayList, k) + " ms"); System.out.println(arrayList.get(0));
 * System.out.println("LinkedList#Index: " + removeByIndex(linkedList, k) +
 * " ms"); System.out.println(linkedList.get(0));
 * System.out.println("ArrayList#Index: " + removeByIterator(arrayItr, k) +
 * " ms"); System.out.println(arrayItr.get(0));
 * System.out.println("linkedList#Index: " + removeByIterator(linkedItr, k) +
 * " ms"); System.out.println(linkedItr.get(0)); }
 * 
 * public static long removeByIndex(List<Integer> list, int k) { long time =
 * System.currentTimeMillis(); for (int i = list.size() - 1; i >= 0; i -= k - 1)
 * { list.remove(i); } if (list.size() != 1) { removeByIndex(list, k); } return
 * System.currentTimeMillis() - time; }
 * 
 * public static long removeByIterator(List<Integer> list, int k) { long time =
 * System.currentTimeMillis(); int c = k-1; Iterator<Integer> it =
 * list.iterator(); int i = 0; while (it.hasNext()) { it.next(); if (i % c == 0)
 * { it.remove(); } i++; } if (list.size() != 1) { removeByIterator(list, k); }
 * return System.currentTimeMillis() - time; }
 * 
 * public static void main(String[] args) { new Part2(10000, 33); } }
 */
import java.util.*;

public final class Part2 {

    private List<Integer> peopleInArray;
    private List<Integer> peopleInLink;
    private final int listLength;

    private Part2(int listLength) {
        this.listLength = listLength;
    }

    private long removeByIndex(List list, int k) {
        long time = System.currentTimeMillis();
        int local = 0;
        while (list.size() > 1) {
            local += k;
            if (local >= list.size()) {
                local %= list.size();
            }
            list.remove(local);
        }
        return System.currentTimeMillis() - time;
    }

    private long removeByIterator(List list, int k) {
        long time = System.currentTimeMillis();
        int local = 0;

        while (list.size() > 1) {
            ListIterator iterator = list.listIterator(local);
            local = removeKStep(iterator, k);
            local %= list.size();
        }


        return System.currentTimeMillis() - time;
    }

    private int removeKStep(Iterator iterator, int k) {
        int i = 0;
        while (iterator.hasNext()) {
            i = (i + 1) % k;
            iterator.next();
            if (i == k - 1) {
                iterator.remove();
            }
        }
        return i;
    }

    private List<Integer> getPeopleInArray() {
        peopleInArray = new ArrayList<>();
        for (int i = 0; i < listLength; i++) {
            peopleInArray.add(i);
        }
        return peopleInArray;
    }

    private List<Integer> getPeopleInLink() {
        peopleInLink = new LinkedList<>();
        for (int i = 0; i < listLength; i++) {
            peopleInLink.add(i);
        }
        return peopleInLink;
    }
    
    public static void main(String[] args) {
        Part2 part2 = new Part2(20_000);
        final int k = 2;

        System.out.println("ArrayList [random access]: " + part2.removeByIndex(part2.getPeopleInArray(), k) + " ms");
        System.out.println("ArrayList [iterator]: " + part2.removeByIterator(part2.getPeopleInArray(), k) + " ms");

        System.out.println("LinkedList [random access]: " + part2.removeByIndex(part2.getPeopleInLink(), k) + " ms");
        System.out.println("LinkedList [iterator]: " + part2.removeByIterator(part2.getPeopleInLink(), k) + " ms");
    }

}